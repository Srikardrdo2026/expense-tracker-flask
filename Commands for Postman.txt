This structure ensures a clean separation of concerns, with:

Backend (backend/): Flask API, MongoDB, WebSockets, authentication, and business logic.

Frontend (frontend/): PyQt/PySide6 GUI, API communication, WebSockets, and assets.


Mongo DB Authentication:
User: Srikar
pwd: One_Piece


Steps to Check if API is working using Postman:

1. python backend/app.py
2. Register a User:
    
    Request (POST): http://127.0.0.1:5000/api/register
    Header: Content-Type: application/json
    Body:
        {
            "username": "somestring",
            "email": "test@example.com",
            "password": "password123"
        }

3. Login a User:
    
    Request (POST):http://127.0.0.1:5000/api/login
    Header: Content-Type: application/json
    Body:
        {
            "username": "somestring",
            "password": "password123"
        }

        Expected Response (200 OK)
{
    "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjdlOGNmNDA4YzE5ZmY3MThkY2FkOTliIiwiZXhwIjoxNzQzMzE0MjkzfQ.v0CG_3XVzsSkbOQ_7Z2nThDS0-naaAs4Mz3iYcBw2gw"
}

4. Get User Expenses:
    Request (GET): http://127.0.0.1:5000/api/expenses/test@example.com

    Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjdlOGNmNDA4YzE5ZmY3MThkY2FkOTliIiwiZXhwIjoxNzQzMzE0MjkzfQ.v0CG_3XVzsSkbOQ_7Z2nThDS0-naaAs4Mz3iYcBw2gw
    
    body: 
    [
    {
        "user_id": "test@example.com",
        "amount": 100.0,
        "category": "Food"
    }
    ]

5. Add a New Expense:

Request (POST): http://127.0.0.1:5000/api/expenses
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjdlOGNmNDA4YzE5ZmY3MThkY2FkOTliIiwiZXhwIjoxNzQzMzE0MjkzfQ.v0CG_3XVzsSkbOQ_7Z2nThDS0-naaAs4Mz3iYcBw2gw
Content-Type: application/json

{
    "user_id": "test@example.com",
    "amount": 50.0,
    "category": "Transport"
}

Expected Response (201 Created)

{
    "message": "Expense added successfully"
}






Steps to Check if Websockets is working using Postman:

1. python backend/app.py

2. Connect to ws://127.0.0.1:5000/ws

3. Send a message to the server:

{
    "event": "fetch_expenses",
    "user_id": "test@example.com"
}


Checking the MongoDB Database:

1. Using Powershell:

    mongosh -u Srikar -p One_Piece --authenticationDatabase admin
    use expense_tracker
    show collections
    db.expenses.find()
    db.users.find()
    db.budgets.find()





    to run the backend and frontend controllers:

    1. python backend/app_bc.py - backend

    2. python -m frontend.app_fc - frontend